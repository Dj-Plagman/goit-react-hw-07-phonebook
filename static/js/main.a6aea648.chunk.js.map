{"version":3,"sources":["redux/contactSlice.js","redux/actions.js","ContactsList/ContactItem.js","ContactsList/ContactsList.js","ContactForm/ContactForm.js","Filter/Filter.js","App.js","redux/reducers.js","redux/store.js","index.js"],"names":["contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","getContacts","query","providesTags","addContact","mutation","url","method","body","name","phone","invalidatesTags","deleteContact","id","useGetContactsQuery","useAddContactMutation","useDeleteContactMutation","actions","setFilter","createAction","ContactListItem","el","deleteIsLoading","isLoading","type","onClick","disabled","color","height","width","connect","state","filter","dispatch","data","contactsIsLoading","obj","toLowerCase","includes","map","ContactForm","useState","setName","number","setNumber","nameInputId","useRef","shortid","generate","numberInputId","onSubmit","e","preventDefault","className","htmlFor","value","pattern","title","required","onChange","currentTarget","filterInputId","App","ContactsList","filterReducer","createReducer","action","payload","store","configureStore","reducer","middleware","getDefaultMiddleware","concat","setupListeners","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6aea648.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n\r\nexport const contactsApi = createApi({\r\n  reducerPath: \"contactsApi\",\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: \"https://6198df1a164fa60017c231f3.mockapi.io\",\r\n  }),\r\n  tagTypes: [\"Contacts\"],\r\n  endpoints: (builder) => ({\r\n    getContacts: builder.query({\r\n      query: () => `/contacts`,\r\n      providesTags: [\"Contacts\"],\r\n    }),\r\n    addContact: builder.mutation({\r\n      query: ({ name, phone }) => ({\r\n        url: \"/contacts\",\r\n        method: \"POST\",\r\n        body: { name, phone },\r\n      }),\r\n      invalidatesTags: [\"Contacts\"],\r\n    }),\r\n    deleteContact: builder.mutation({\r\n      query: (id) => ({\r\n        url: `/contacts/${id}`,\r\n        method: \"DELETE\",\r\n      }),\r\n      invalidatesTags: [\"Contacts\"],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useGetContactsQuery,\r\n  useAddContactMutation,\r\n  useDeleteContactMutation,\r\n} = contactsApi;","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst setFilter = createAction(\"contacts/setFilter\");\r\n\r\nconst actions = { setFilter };\r\n\r\nexport default actions;","import Loader from \"react-loader-spinner\";\r\nimport { useDeleteContactMutation } from \"../redux/contactSlice\";\r\n\r\n\r\nexport default function ContactListItem({ el }) {\r\n  const [deleteContact, { isLoading: deleteIsLoading }] =\r\n    useDeleteContactMutation();\r\n  return (\r\n<p>\r\n      {el.name}: {el.phone}\r\n      <button\r\n        type=\"button\"\r\n        data-id={el.id}\r\n        onClick={() => {\r\n          deleteContact(el.id);\r\n        }}\r\n        disabled={deleteIsLoading}\r\n      >\r\n        {deleteIsLoading ? (\r\n          <Loader type=\"TailSpin\" color=\"#00BFFF\" height={15} width={45} />\r\n        ) : (\r\n          \"Delete\"\r\n        )}\r\n      </button>\r\n    </p>\r\n  );\r\n}","//import React from \"react\";\r\n//import styles from \"./ContactList.module.css\";\r\n//import { useSelector, useDispatch } from \"react-redux\";\r\n//import { deleteContact } from \"../redux/contacts/contacts-operations\";\r\n//import {\r\n//  getFilteredContacts,\r\n//} from \"../redux/contacts/contacts-selectors\";\r\n\r\n//export default function ContactList() {\r\n//  const filteredContacts = useSelector(getFilteredContacts);\r\n//  const dispatch = useDispatch();\r\n\r\n//  return (\r\n//    <ul className=\"list\">\r\n//      {filteredContacts.map(({ id, name, number }) => (\r\n//        <li key={id} className=\"item\">\r\n//          <p className={styles.contact}>\r\n//            {name}: {number}\r\n//          </p>\r\n\r\n//          <button\r\n//            className=\"btn\"\r\n//            type=\"button\"\r\n//            onClick={() => dispatch(deleteContact(id))}\r\n//          >\r\n//            Delete\r\n//          </button>\r\n//        </li>\r\n//      ))}\r\n//    </ul>\r\n//  );\r\n//}\r\nimport propTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { useGetContactsQuery } from \"../redux/contactSlice\";\r\nimport actions from \"../redux/actions\";\r\nimport ContactListItem from \"./ContactItem\";\r\n\r\nfunction ContactList({ filter }) {\r\n  const { data, isLoading: contactsIsLoading } = useGetContactsQuery();\r\n  return (\r\n    <div>\r\n      {contactsIsLoading && (\r\n        <Loader type=\"TailSpin\" color=\"#00BFFF\" height={100} width={100} />\r\n      )}\r\n      {data &&\r\n        data\r\n          .filter((obj) =>\r\n            obj.name.toLowerCase().includes(filter.toLowerCase())\r\n          )\r\n          .map((el) => <ContactListItem key={el.id} el={el} />)}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    filter: state.filter,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setFilter: (filter) => dispatch(actions.setFilter(filter)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\nContactList.propTypes = {\r\n  filter: propTypes.string.isRequired,\r\n};","import { useState, useRef } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { useAddContactMutation } from \"../redux/contactSlice\";\r\n\r\n\r\nfunction ContactForm() {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  const nameInputId = useRef(shortid.generate());\r\n  const numberInputId = useRef(shortid.generate());\r\n  const [addContact, { isLoading }] = useAddContactMutation();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    addContact({ name, phone: number });\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"input-wrapper\">\r\n        <label htmlFor={nameInputId}>Name</label>\r\n        <input\r\n          id={nameInputId}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Casnumbermore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={(e) => {\r\n            setName(e.currentTarget.value);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"input-wrapper\">\r\n        {\" \"}\r\n        <label htmlFor={numberInputId}>Number</label>\r\n        <input\r\n          id={numberInputId}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={(e) => {\r\n            setNumber(e.currentTarget.value);\r\n          }}\r\n        />\r\n      </div>\r\n      <button type=\"submit\" disabled={isLoading}>\r\n        {isLoading ? (\r\n          <Loader type=\"TailSpin\" color=\"#00BFFF\" height={20} width={85} />\r\n        ) : (\r\n          \"Add contact\"\r\n        )}\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ContactForm;","//import React from \"react\";\r\n//import styles from \"./Filter.module.css\";\r\n//import { useSelector, useDispatch } from \"react-redux\";\r\n//import { changeFilter } from \"../redux/contacts/contacts-actions\";\r\n//import { getFilter } from \"../redux/contacts/contacts-selectors\";\r\n\r\n//export default function Filter() {\r\n//  const inputValue = useSelector(getFilter);\r\n//  const dispatch = useDispatch();\r\n//  return (\r\n//    <>\r\n//      <label className=\"label\">\r\n//        Find contacts by name\r\n//        <input\r\n//          className={styles.input}\r\n//          type=\"text\"\r\n//          value={inputValue}\r\n//          onChange={(e) => dispatch(changeFilter(e.target.value))}\r\n//        />\r\n//      </label>\r\n//    </>\r\n//  );\r\n//}\r\n\r\nimport shortid from \"shortid\";\r\nimport propTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"../redux/actions\";\r\n\r\nfunction Filter({ filter, setFilter }) {\r\n  const filterInputId = shortid.generate();\r\n  return (\r\n    <div>\r\n      <label htmlFor={filterInputId}>Find contacts by name</label>\r\n      <input\r\n        id={filterInputId}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Casnumbermore d'Artagnan и т. п.\"\r\n        onChange={(e) => setFilter(e.currentTarget.value)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    filter: state.filter,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setFilter: (filter) => dispatch(actions.setFilter(filter)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n  filter: propTypes.string,\r\n  setFilter: propTypes.func.isRequired,\r\n};","import React from 'react';\r\nimport ContactsList from './ContactsList/ContactsList';\r\nimport ContactForm from './ContactForm/ContactForm';\r\nimport Filter from './Filter/Filter';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    return (\r\n      <div className=\"Containet\">\r\n        <h1>Phonebook</h1>\r\n        <ContactForm />\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n        <ContactsList />\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default App;","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from \"./actions\";\r\n\r\nexport const filterReducer = createReducer(\"\", {\r\n  [actions.setFilter]: (state, action) => action.payload,\r\n});","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { filterReducer } from \"./reducers\";\r\nimport { contactsApi } from \"./contactSlice\";\r\nimport { setupListeners } from \"@reduxjs/toolkit/dist/query\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    [contactsApi.reducerPath]: contactsApi.reducer,\r\n    filter: filterReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(contactsApi.middleware),\r\n});\r\n\r\nsetupListeners(store.dispatch);","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { store } from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}